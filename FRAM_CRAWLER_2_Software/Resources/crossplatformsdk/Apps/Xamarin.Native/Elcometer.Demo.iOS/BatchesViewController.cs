// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Elcometer.Core.iOS;
using Elcometer.Core.Model;
using Elcometer.Core.Services;
using Foundation;
using UIKit;

namespace Elcometer.Demo.iOS
{
	public partial class BatchesViewController : UITableViewController
	{
        private List<IGaugeBatch> _batches = new List<IGaugeBatch>();
        private string CellIdentifier = "BatchTableCell";
        private Batch _downloadedBatch;

		public BatchesViewController (IntPtr handle) : base (handle)
		{
		}

        public IGauge Gauge { get; set; }

        public async override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // put the gauge into a mode batches can be downloaded from it
            await Task.Run(() => Gauge.StartBatching());

            // request the batches
            _batches = await Task.Run(() => Gauge.GetBatches());

            // update ui
            TableView.ReloadData();
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            if (IsMovingFromParentViewController)
            {
                // put the gauge back into live reading mode
                Task.Run(() => Gauge.EndBatching());
            }
        }


        public override nint RowsInSection(UITableView tableView, nint section)
        {
            return _batches.Count;
        }

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            UITableViewCell cell = tableView.DequeueReusableCell(CellIdentifier);

            if (cell == null)
            {
                cell = new UITableViewCell(UITableViewCellStyle.Default, CellIdentifier);
            }

            cell.TextLabel.Text = _batches[indexPath.Row].Name;

            return cell;
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.Identifier.Equals("BatchInfoSegue"))
            {
                var viewController = (BatchInfoViewController)segue.DestinationViewController;
                viewController.Batch = _downloadedBatch;
                TableView.DeselectRow(TableView.IndexPathForSelectedRow, true);
            }
        }

        public override async void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            // clear the batch service of any previously download batches
            ElcometerCore.Instance.BatchService.Batches.Clear();

            // do the actual download - could take a few seconds depending on the number of readings
            // in a proper application you'd want to show an activity wheel while this is occuring
            await Task.Run(() => Gauge.DownloadBatchesTo(new List<IGaugeBatch> { _batches[indexPath.Row] }, ElcometerCore.Instance.BatchService));

            if (ElcometerCore.Instance.BatchService.Batches.Count > 0)
            {
                _downloadedBatch = ElcometerCore.Instance.BatchService.Batches[0];
                PerformSegue("BatchInfoSegue", this);
            }
        }
	}
}
