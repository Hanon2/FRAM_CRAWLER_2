// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Specialized;
using Elcometer.Core.iOS;
using Foundation;
using UIKit;

namespace Elcometer.Demo.iOS
{
    public partial class MainViewController : UIViewController, IUITableViewDataSource, IUITableViewDelegate
	{
        private string CellIdentifier = "GaugeTableCell";

		public MainViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            GaugesTable.Delegate = this;
            GaugesTable.DataSource = this;

            // register to get updates to connected gauges
            ElcometerCore.Instance.GaugeService.Gauges.CollectionChanged += Gauges_CollectionChanged;
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            if (IsMovingFromParentViewController)
            {
                // unsubscribe for live reading messages
                ElcometerCore.Instance.GaugeService.Gauges.CollectionChanged -= Gauges_CollectionChanged;
            }
        }

        private void Gauges_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            GaugesTable.ReloadData();
        }

        async partial void ConnectBluetoothClassicTouch(UIButton sender)
        {
            await ElcometerCore.Instance.ConnectionService.ShowPickerClassic();
        }
    
        async partial void ConnectBluetoothLETouch(UIButton sender)
        {
            await ElcometerCore.Instance.ConnectionService.ShowPickerLE();
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            UITableViewCell cell = tableView.DequeueReusableCell(CellIdentifier);

            if (cell == null)
            {
                cell = new UITableViewCell(UITableViewCellStyle.Default, CellIdentifier);
            }

            cell.TextLabel.Text = ElcometerCore.Instance.GaugeService.Gauges[indexPath.Row].DeviceInfo.Description;

            return cell;
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return ElcometerCore.Instance.GaugeService.Gauges.Count;
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.Identifier.Equals("GaugeSegue"))
            {
                var viewController = (GaugeViewController)segue.DestinationViewController;
                viewController.Gauge = ElcometerCore.Instance.GaugeService.Gauges[GaugesTable.IndexPathForSelectedRow.Row];
                GaugesTable.DeselectRow(GaugesTable.IndexPathForSelectedRow, true);
            }
        }

        [Export("tableView:didSelectRowAtIndexPath:")]
        public void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            PerformSegue("GaugeSegue", this);
        }
    }
}
