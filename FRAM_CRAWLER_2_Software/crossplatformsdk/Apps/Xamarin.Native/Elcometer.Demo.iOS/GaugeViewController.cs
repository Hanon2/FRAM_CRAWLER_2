// This file has been autogenerated from a class added in the UI designer.

using System;
using Elcometer.Core.iOS;
using Elcometer.Core.Services;
using Foundation;
using UIKit;

namespace Elcometer.Demo.iOS
{
	public partial class GaugeViewController : UIViewController
	{
		public GaugeViewController (IntPtr handle) : base (handle)
		{
		}

        public IGauge Gauge { get; set; }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LiveReadingTextView.Editable = false;
            LiveReadingTextView.Text = "";

            // register for all live readings (this will be for all connected gauges)
            ElcometerCore.Instance.MessagingService.Subscribe<ILiveReadingMessageParams>(this, ElcometerCoreMessages.LiveReadingMessage, OnLiveReading);
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            if (IsMovingFromParentViewController)
            {
                // unsubscribe for live reading messages
                ElcometerCore.Instance.MessagingService.Unsubscribe<ILiveReadingMessageParams>(this, ElcometerCoreMessages.LiveReadingMessage);
            }
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.Identifier.Equals("BatchesSegue"))
            {
                var viewController = (BatchesViewController)segue.DestinationViewController;
                viewController.Gauge = Gauge;
            }
        }

        private void OnLiveReading(object sender, ILiveReadingMessageParams args)
        {
            // we only want to process the live readings from the gauge we are 'viewing'
            if (sender == Gauge)
            {
                string readingString = "";

                // we need to create a dummy batch so we can use it to format the readings into
                // the correct units
                var dummyBatch = args.CreateEmtpyBatch(ElcometerCore.Instance.BatchService, "");

                // build the reading columns into a single line
                foreach (var reading in args.GetReadings(dummyBatch))
                {
                    if (!String.IsNullOrEmpty(readingString))
                    {
                        readingString += ", ";
                    }

                    // we are combined reading value formatted as strings here - the numeric value is available in the NumericValue property
                    readingString += reading.Value;
                }

                readingString += "\n";

                // add reading text
                LiveReadingTextView.Text += readingString;

                // auto scroll
                LiveReadingTextView.ScrollRangeToVisible(new NSRange(LiveReadingTextView.Text.Length - 1, 1));
            }
        }
	}
}
